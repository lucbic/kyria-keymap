#include <dt-bindings/zmk/mouse.h>
#include "zmk-helpers/key-labels/kyria.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/pointing.h>

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5
#define KEYS_LT LH0 LH1 LH2 LH3 LH4
#define KEYS_RT RH0 RH1 RH2 RH3 RH4
#define HM_TAPPING_TERM 300
#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 100

&led_strip {
    chain-length = <6>;
    chain-length = <31>;
};

// Mouse behavior customization
&mmv {
    acceleration-exponent = <1>;      // Default: 1
    time-to-max-speed-ms = <500>;     // Slower ramp-up for more control (default: 300)
    delay-ms = <0>;                   // Default: 0
};

// Mouse scroll behavior customization
&msc {
    time-to-max-speed-ms = <60>;
    acceleration-exponent = <1>;
};

// Set the knob scroll amount
#undef ZMK_POINTING_DEFAULT_SCRL_VAL
#define ZMK_POINTING_DEFAULT_SCRL_VAL 60

/ {
    macros {
        lm: layer_mod {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };
    };

    behaviors {
        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <60>; // Tap duration for scrolling
        };

        sensor_noop: behavior_sensor_rotate_noop {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&none>, <&none>;
        };

        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_RT>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_LT>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        DelPrevWord {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <30 43>;
            layers = <3>;
        };

        DelNextWord {
            bindings = <&kp LA(DELETE)>;
            key-positions = <31 44>;
            layers = <3>;
        };

        MissionControl {
            bindings = <&kp LC(UP)>;
            key-positions = <7 8 9>;
            layers = <0>;
        };

        NextTab {
            bindings = <&kp LC(TAB)>;
            key-positions = <33 46>;
            layers = <0>;
        };

        PreviousTab {
            bindings = <&kp LC(LS(TAB))>;
            key-positions = <30 43>;
            layers = <0>;
        };

        FocusNextPane {
            bindings = <&kp LC(RIGHT)>;
            key-positions = <32 45>;
            layers = <0>;
        };

        FocusPreviousPane {
            bindings = <&kp LC(LEFT)>;
            key-positions = <31 44>;
            layers = <0>;
        };

        IndentSelection {
            bindings = <&kp LG(RIGHT_BRACKET)>;
            key-positions = <33 46>;
            layers = <1>;
        };

        DedentSelection {
            bindings = <&kp LG(LEFT_BRACKET)>;
            key-positions = <32 45>;
            layers = <1>;
        };

        DeleteSelection {
            bindings = <&kp LS(DELETE)>;
            key-positions = <4 3 2>;
            layers = <0>;
        };

        DuplicateSelection {
            bindings = <&kp LG(LS(D))>;
            key-positions = <26 27 28>;
            layers = <0>;
        };

        SearchBar {
            bindings = <&kp LG(SPACE)>;
            key-positions = <35 36 37>;
        };

        CommentSelectedLines {
            bindings = <&kp LG(SLASH)>;
            key-positions = <33 46>;
            layers = <2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&kp ESC      &kp Q          &kp W             &kp E               &kp R                 &kp T                                                                               &kp Y    &kp U                  &kp I                &kp O              &kp P              &kp TILDE
&caps_word   &hm_l LCTRL A  &hm_l LEFT_ALT S  &hm_l LEFT_SHIFT D  &hm_l LEFT_COMMAND F  &kp G                                                                               &kp H    &hm_r RIGHT_COMMAND J  &hm_r RIGHT_SHIFT K  &hm_r RIGHT_ALT L  &hm_r RCTRL CARET  &kp SQT
&kp LA(TAB)  &kp Z          &kp X             &kp C               &kp V                 &kp B      &mkp LCLK        &mkp RCLK     &kp LC(BACKSLASH)  &kp LC(LS(BACKSLASH))  &kp N    &kp M                  &kp COMMA            &kp DOT            &kp SLASH          &kp GRAVE
                                              &trans              &kp LC(LA(LEFT))      &mkp MCLK  &lt 1 BACKSPACE  &lt 2 DELETE  &lt 4 ENTER        &lt 3 SPACE            &kp TAB  &kp LC(LA(RIGHT))      &trans
            >;

            sensor-bindings =
                <&scroll_up_down>,
                <&inc_dec_kp LC(LA(RIGHT)) LC(LA(LEFT))>;

            label = "Base";
        };

        symbols_layer {
            bindings = <
&none  &kp LT                   &kp LEFT_BRACE          &kp LEFT_BRACKET       &kp LEFT_PARENTHESIS       &none                                               &none      &kp RIGHT_PARENTHESIS        &kp RIGHT_BRACKET        &kp RIGHT_BRACE       &kp GREATER_THAN  &none
&none  &hm_l LCTRL EXCLAMATION  &hm_l LEFT_ALT AT_SIGN  &hm_l LEFT_SHIFT HASH  &hm_l LEFT_COMMAND DOLLAR  &none                                               &none      &hm_r RIGHT_COMMAND PERCENT  &hm_r RIGHT_SHIFT CARET  &hm_r RIGHT_ALT AMPS  &hm_r RCTRL STAR  &none
&none  &kp UNDERSCORE           &kp SEMICOLON           &kp SINGLE_QUOTE       &kp BACKSLASH              &none  &none  &none  &kp EXCLAMATION  &kp QUESTION  &kp EQUAL  &kp SLASH                    &kp DOUBLE_QUOTES        &kp COLON             &kp PIPE          &none
                                                        &none                  &none                      &none  &none  &none  &kp UNDERSCORE   &kp MINUS     &none      &none                        &none
            >;

            sensor-bindings = <&sensor_noop>, <&inc_dec_kp C_VOL_UP C_VOL_DN>;

            label = "Symbols";
        };

        num_layer {
            bindings = <
&none  &none      &kp LESS_THAN                    &kp EQUAL                &kp GREATER_THAN                      &none                                     &none  &kp NUMBER_7                  &kp NUMBER_8                &kp NUMBER_9              &none      &none
&none  &kp LCTRL  &hm_l LEFT_ALT LEFT_PARENTHESIS  &hm_l LEFT_SHIFT PERIOD  &hm_l LEFT_COMMAND RIGHT_PARENTHESIS  &none                                     &none  &hm_r RIGHT_COMMAND NUMBER_4  &hm_r RIGHT_SHIFT NUMBER_5  &hm_r RIGHT_ALT NUMBER_6  &kp RCTRL  &none
&none  &none      &kp SLASH                        &kp COMMA                &kp ASTERISK                          &none  &none  &none  &kp SLASH  &kp STAR  &none  &kp NUMBER_1                  &kp NUMBER_2                &kp NUMBER_3              &none      &none
                                                   &none                    &none                                 &none  &none  &none  &kp MINUS  &kp PLUS  &none  &kp N0                        &none
            >;

            sensor-bindings = <&sensor_noop>, <&inc_dec_kp C_BRI_INC C_BRI_DEC>;

            label = "Numbers";
        };

        nav_layer {
            bindings = <
&none  &none      &kp LA(LC(LG(LEFT)))               &kp LA(LG(UP_ARROW))           &kp LA(LC(LG(RIGHT)))             &none                                                     &kp PG_UP    &kp HOME          &kp UP            &kp END           &kp K_SCROLL_UP    &none
&none  &kp LCTRL  &hm_l LEFT_ALT LA(LG(LEFT_ARROW))  &hm_l LEFT_SHIFT LA(LG(DOWN))  &hm_l LEFT_COMMAND LA(LG(RIGHT))  &none                                                     &kp PG_DN    &kp LEFT          &kp DOWN          &kp RIGHT         &kp K_SCROLL_DOWN  &none
&none  &none      &kp LC(LG(LEFT_ARROW))             &none                          &kp LC(LG(RIGHT))                 &none  &kp LA(LS(LEFT))  &kp LA(LS(RIGHT))  &none  &none  &kp LG(TAB)  &kp LC(NUMBER_1)  &kp LC(NUMBER_2)  &kp LC(NUMBER_3)  &kp LC(NUMBER_4)   &none
                                                     &none                          &kp LEFT_SHIFT                    &none  &kp LA(LEFT)      &kp LA(RIGHT)      &none  &none  &none        &none             &none
            >;

            sensor-bindings = <&inc_dec_kp LG(DOWN) LG(UP)>;
            label = "Navigation";
        };

        special_layer {
            bindings = <
&kp F19               &kp F1  &kp F2   &kp F3   &kp F4   &none                                              &kp C_BRI_INC  &kp C_VOLUME_DOWN  &kp C_MUTE        &kp C_VOLUME_UP  &rgb_ug RGB_BRD  &rgb_ug RGB_BRI
&kp LG(LS(NUMBER_3))  &kp F5  &kp F6   &kp F7   &kp F8   &none                                              &kp C_BRI_DEC  &kp C_PREVIOUS     &kp C_PLAY_PAUSE  &kp C_NEXT       &rgb_ug RGB_HUD  &rgb_ug RGB_HUI
&kp LG(LS(NUMBER_4))  &kp F9  &kp F10  &kp F11  &kp F12  &none      &kp LG(Z)  &kp LG(LS(Z))  &none  &none  &none          &none              &none             &none            &rgb_ug RGB_SAD  &rgb_ug RGB_SAI
                                       &none    &none    &kp LG(X)  &kp LG(C)  &kp LG(V)      &none  &none  &none          &none              &none
            >;

            // Set the knob scroll amount
            sensor-bindings = <&inc_dec_kp LA(RIGHT) LA(LEFT)>;
            label = "Function";
        };
    };
};
