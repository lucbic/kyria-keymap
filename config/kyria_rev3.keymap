#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>
 
&led_strip {
    chain-length = <31>;
    chain-length = <31>;
};

/ {
    behaviors {
        sht: shift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&sk>;
        };

        emw: encoder_mousewheel {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            tap-ms = <20>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        };
        
        // Add a mod-morph behavior to handle shift key with warp
        shift_to_warp: shift_to_warp {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&trans>, <&to 5>; // Switch to warp layer when shift is pressed
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        DelPrevWord {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <30 43>;
            layers = <3>;
        };

        DelNextWord {
            bindings = <&kp LA(DELETE)>;
            key-positions = <31 44>;
            layers = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&kp ESC           &kp Q       &kp W        &kp E           &kp R               &kp T                                                                                           &kp Y    &kp U                &kp I            &kp O        &kp P           &kp TILDE
&kp LSHFT         &mt CAPS A  &mt LCTRL S  &mt LEFT_ALT D  &mt LEFT_COMMAND F  &kp G                                                                                           &kp H    &mt RIGHT_COMMAND J  &mt RIGHT_ALT K  &mt RCTRL L  &mt CAPS CARET  &mt RIGHT_SHIFT SQT
&kp LEFT_COMMAND  &kp Z       &kp X        &kp C           &kp V               &kp B                       &mkp LCLK        &mkp RCLK     &kp LC(LA(LEFT))  &kp LC(LA(RIGHT))  &kp N    &kp M                &kp COMMA        &kp DOT      &kp SLASH       &kp GRAVE
                                           &trans          &msc SCRL_DOWN      &sht LEFT_SHIFT LEFT_SHIFT  &lt 1 BACKSPACE  &lt 2 DELETE  &lt 4 ENTER       &lt 3 SPACE        &kp TAB  &msc SCRL_UP         &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp C_AC_SCROLL_UP C_AC_SCROLL_DOWN>;

            label = "Base";
        };

        symbols_layer {
            bindings = <
&none           &kp LT                &kp LEFT_BRACE     &kp LEFT_BRACKET   &kp LEFT_PARENTHESIS     &none                                               &none  &kp RIGHT_PARENTHESIS      &kp RIGHT_BRACKET    &kp RIGHT_BRACE         &kp GREATER_THAN  &none
&kp LEFT_SHIFT  &mt CAPS EXCLAMATION  &mt LCTRL AT_SIGN  &mt LEFT_ALT HASH  &mt LEFT_COMMAND DOLLAR  &none                                               &none  &mt RIGHT_COMMAND PERCENT  &mt RIGHT_ALT CARET  &mt RIGHT_CONTROL AMPS  &mt CAPS STAR     &kp RIGHT_SHIFT
&none           &kp UNDERSCORE        &kp SEMICOLON      &kp SINGLE_QUOTE   &kp BACKSLASH            &none  &none  &none  &kp EXCLAMATION  &kp QUESTION  &none  &kp SLASH                  &kp DOUBLE_QUOTES    &kp COLON               &kp PIPE          &none
                                                         &none              &none                    &none  &none  &none  &kp UNDERSCORE   &kp MINUS     &none  &none                      &none
            >;

            label = "Symbols";
        };

        num_layer {
            bindings = <
&none           &none         &kp LESS_THAN                      &kp EQUAL            &kp GREATER_THAN                    &none                                     &none  &kp NUMBER_7               &kp NUMBER_8            &kp NUMBER_9                &none         &none
&kp LEFT_SHIFT  &kp CAPSLOCK  &mt LEFT_CONTROL LEFT_PARENTHESIS  &mt LEFT_ALT PERIOD  &mt LEFT_COMMAND RIGHT_PARENTHESIS  &none                                     &none  &mt LEFT_COMMAND NUMBER_4  &mt RIGHT_ALT NUMBER_5  &mt RIGHT_CONTROL NUMBER_6  &kp CAPSLOCK  &kp RIGHT_SHIFT
&none           &none         &kp SLASH                          &kp COMMA            &kp ASTERISK                        &none  &none  &none  &kp SLASH  &kp STAR  &none  &kp NUMBER_1               &kp NUMBER_2            &kp NUMBER_3                &none         &none
                                                                 &none                &none                               &none  &none  &none  &kp MINUS  &kp PLUS  &none  &kp N0                     &none
            >;

            label = "Numbers";
        };

        nav_layer {
            bindings = <
&none           &none             &kp LA(LC(LG(LEFT)))                 &kp LA(LG(UP_ARROW))       &kp LA(LC(LG(RIGHT)))           &none                                                     &kp PG_UP    &kp HOME          &kp UP            &kp END           &kp K_SCROLL_UP    &none
&kp LEFT_SHIFT  &kp CAPSLOCK      &mt LEFT_CONTROL LA(LG(LEFT_ARROW))  &mt LEFT_ALT LA(LG(DOWN))  &mt LEFT_COMMAND LA(LG(RIGHT))  &none                                                     &kp PG_DN    &kp LEFT          &kp DOWN          &kp RIGHT         &kp K_SCROLL_DOWN  &none
&none           &kp LC(LG(LEFT))  &kp LC(LG(RIGHT))                    &kp LC(LEFT)               &kp LC(RIGHT)                   &none  &kp LA(LS(LEFT))  &kp LA(LS(RIGHT))  &none  &none  &kp LG(TAB)  &kp LC(NUMBER_1)  &kp LC(NUMBER_2)  &kp LC(NUMBER_3)  &kp LC(NUMBER_4)   &none
                                                                       &none                      &none                           &none  &kp LA(LEFT)      &kp LA(RIGHT)      &none  &none  &none        &none             &none
            >;

            sensor-bindings = <&inc_dec_kp LC(LEFT) LC(RIGHT)>;
            label = "Navigation";
        };

        special_layer {
            bindings = <
&kp C_SLEEP           &kp F1  &kp F2   &kp F3   &kp F4   &none                                              &kp C_BRI_INC  &kp C_VOLUME_DOWN  &kp C_MUTE        &kp C_VOLUME_UP  &rgb_ug RGB_BRD  &rgb_ug RGB_BRI
&kp LG(LS(NUMBER_3))  &kp F5  &kp F6   &kp F7   &kp F8   &none                                              &kp C_BRI_DEC  &kp K_PREVIOUS     &kp K_PLAY_PAUSE  &kp K_NEXT       &rgb_ug RGB_HUD  &rgb_ug RGB_HUI
&kp LG(LS(NUMBER_4))  &kp F9  &kp F10  &kp F11  &kp F12  &none      &kp LG(Z)  &kp LG(LS(Z))  &none  &none  &none          &none              &none             &none            &rgb_ug RGB_SAD  &rgb_ug RGB_SAI
                                       &none    &none    &kp LG(X)  &kp LG(C)  &kp LG(V)      &none  &none  &none          &none              &none
            >;
        };

        // Add a warp layer for fast mouse movement
        warp_layer {
            bindings = <
// Same layout as your base layer, but leave most keys as &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                                      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                                      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans  &to 0   &trans  &trans  &trans  &trans  &trans
            >;
            
            // This layer would have the fast movement (warp) behavior
            label = "Warp";
        };
    };
};
