#include <dt-bindings/zmk/mouse.h>
#include "zmk-helpers/key-labels/kyria.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5
#define KEYS_LT LH0 LH1 LH2 LH3 LH4
#define KEYS_RT RH0 RH1 RH2 RH3 RH4
#define HM_TAPPING_TERM 300
#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 150

&led_strip {
    chain-length = <6>;
    chain-length = <31>;
};

/ {
    macros {
        lm: layer_mod {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };
    };

    behaviors {
        sht: shift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "hold-preferred";
            bindings = <&lm>, <&sk>;
        };

        emw: encoder_mousewheel {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            tap-ms = <20>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        };

        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_RT>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_LT>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        DelPrevWord {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <30 43>;
            layers = <3>;
        };

        DelNextWord {
            bindings = <&kp LA(DELETE)>;
            key-positions = <31 44>;
            layers = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&kp ESC           &kp Q         &kp W          &kp E             &kp R                 &kp T                                                                                       &kp Y    &kp U                  &kp I              &kp O          &kp P             &kp TILDE
&kp LSHFT         &hm_l CAPS A  &hm_l LCTRL S  &hm_l LEFT_ALT D  &hm_l LEFT_COMMAND F  &kp G                                                                                       &kp H    &hm_r RIGHT_COMMAND J  &hm_r RIGHT_ALT K  &hm_r RCTRL L  &hm_r CAPS CARET  &hm_r RIGHT_SHIFT SQT
&kp LEFT_COMMAND  &kp Z         &kp X          &kp C             &kp V                 &kp B              &mkp LCLK        &mkp RCLK     &kp LC(BACKSLASH)  &kp LC(LS(BACKSLASH))  &kp N    &kp M                  &kp COMMA          &kp DOT        &kp SLASH         &kp GRAVE
                                               &trans            &kp LC(LA(LEFT))      &sht 5 LEFT_SHIFT  &lt 1 BACKSPACE  &lt 2 DELETE  &lt 4 ENTER        &lt 3 SPACE            &kp TAB  &kp LC(LA(RIGHT))      &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_BRI_INC C_BRI_DEC>,
                <&inc_dec_kp C_VOL_UP C_VOL_DN>;

            label = "Base";
        };

        symbols_layer {
            bindings = <
&none           &kp LT                  &kp LEFT_BRACE       &kp LEFT_BRACKET     &kp LEFT_PARENTHESIS       &none                                               &none  &kp RIGHT_PARENTHESIS        &kp RIGHT_BRACKET      &kp RIGHT_BRACE           &kp GREATER_THAN  &none
&kp LEFT_SHIFT  &hm_l CAPS EXCLAMATION  &hm_l LCTRL AT_SIGN  &hm_l LEFT_ALT HASH  &hm_l LEFT_COMMAND DOLLAR  &none                                               &none  &hm_r RIGHT_COMMAND PERCENT  &hm_r RIGHT_ALT CARET  &hm_r RIGHT_CONTROL AMPS  &hm_r CAPS STAR   &kp RIGHT_SHIFT
&none           &kp UNDERSCORE          &kp SEMICOLON        &kp SINGLE_QUOTE     &kp BACKSLASH              &none  &none  &none  &kp EXCLAMATION  &kp QUESTION  &none  &kp SLASH                    &kp DOUBLE_QUOTES      &kp COLON                 &kp PIPE          &none
                                                             &none                &none                      &none  &none  &none  &kp UNDERSCORE   &kp MINUS     &none  &none                        &none
            >;

            label = "Symbols";
        };

        num_layer {
            bindings = <
&none           &none         &kp LESS_THAN                        &kp EQUAL              &kp GREATER_THAN                      &none                                     &none  &kp NUMBER_7                 &kp NUMBER_8              &kp NUMBER_9                  &none         &none
&kp LEFT_SHIFT  &kp CAPSLOCK  &hm_l LEFT_CONTROL LEFT_PARENTHESIS  &hm_l LEFT_ALT PERIOD  &hm_l LEFT_COMMAND RIGHT_PARENTHESIS  &none                                     &none  &hm_r LEFT_COMMAND NUMBER_4  &hm_r RIGHT_ALT NUMBER_5  &hm_r RIGHT_CONTROL NUMBER_6  &kp CAPSLOCK  &kp RIGHT_SHIFT
&none           &none         &kp SLASH                            &kp COMMA              &kp ASTERISK                          &none  &none  &none  &kp SLASH  &kp STAR  &none  &kp NUMBER_1                 &kp NUMBER_2              &kp NUMBER_3                  &none         &none
                                                                   &none                  &none                                 &none  &none  &none  &kp MINUS  &kp PLUS  &none  &kp N0                       &none
            >;

            label = "Numbers";
        };

        nav_layer {
            bindings = <
&none           &none             &kp LA(LC(LG(LEFT)))                   &kp LA(LG(UP_ARROW))         &kp LA(LC(LG(RIGHT)))             &none                                                     &kp PG_UP    &kp HOME          &kp UP            &kp END           &kp K_SCROLL_UP    &none
&kp LEFT_SHIFT  &kp CAPSLOCK      &hm_l LEFT_CONTROL LA(LG(LEFT_ARROW))  &hm_l LEFT_ALT LA(LG(DOWN))  &hm_l LEFT_COMMAND LA(LG(RIGHT))  &none                                                     &kp PG_DN    &kp LEFT          &kp DOWN          &kp RIGHT         &kp K_SCROLL_DOWN  &none
&none           &kp LC(LG(LEFT))  &kp LC(LG(RIGHT))                      &kp LC(LEFT)                 &kp LC(RIGHT)                     &none  &kp LA(LS(LEFT))  &kp LA(LS(RIGHT))  &none  &none  &kp LG(TAB)  &kp LC(NUMBER_1)  &kp LC(NUMBER_2)  &kp LC(NUMBER_3)  &kp LC(NUMBER_4)   &none
                                                                         &none                        &kp LEFT_SHIFT                    &none  &kp LA(LEFT)      &kp LA(RIGHT)      &none  &none  &none        &none             &none
            >;

            sensor-bindings = <&inc_dec_kp LC(LEFT) LC(RIGHT)>;
            label = "Navigation";
        };

        special_layer {
            bindings = <
&kp C_SLEEP           &kp F1  &kp F2   &kp F3   &kp F4   &none                                              &kp C_BRI_INC  &kp C_VOLUME_DOWN  &kp C_MUTE        &kp C_VOLUME_UP  &rgb_ug RGB_BRD  &rgb_ug RGB_BRI
&kp LG(LS(NUMBER_3))  &kp F5  &kp F6   &kp F7   &kp F8   &none                                              &kp C_BRI_DEC  &kp C_PREVIOUS     &kp C_PLAY_PAUSE  &kp C_NEXT       &rgb_ug RGB_HUD  &rgb_ug RGB_HUI
&kp LG(LS(NUMBER_4))  &kp F9  &kp F10  &kp F11  &kp F12  &none      &kp LG(Z)  &kp LG(LS(Z))  &none  &none  &none          &none              &none             &none            &rgb_ug RGB_SAD  &rgb_ug RGB_SAI
                                       &none    &none    &kp LG(X)  &kp LG(C)  &kp LG(V)      &none  &none  &none          &none              &none
            >;
        };

        // Add a warp layer for fast mouse movement

        warp_layer {
            bindings = <
&kp ESC           &kp LS(Q)         &kp LS(W)          &kp LS(E)             &kp LS(R)                 &kp LS(T)                                                                                       &kp LS(Y)  &kp LS(U)                  &kp LS(I)              &kp LS(O)          &kp LS(P)             &kp TILDE
&kp LSHFT         &hm_l CAPS LS(A)  &hm_l LCTRL LS(S)  &hm_l LEFT_ALT LS(D)  &hm_l LEFT_COMMAND LS(F)  &kp LS(G)                                                                                       &kp LS(H)  &hm_r RIGHT_COMMAND LS(J)  &hm_r RIGHT_ALT LS(K)  &hm_r RCTRL LS(L)  &hm_r CAPS LS(CARET)  &hm_r RIGHT_SHIFT LS(SQT)
&kp LEFT_COMMAND  &kp LS(Z)         &kp LS(X)          &kp LS(C)             &kp LS(V)                 &kp LS(B)          &mkp LCLK        &mkp RCLK     &kp LC(LS(BACKSLASH))  &kp LC(LS(BACKSLASH))  &kp LS(N)  &kp LS(M)                  &kp LS(COMMA)          &kp LS(DOT)        &kp LS(SLASH)         &kp LS(GRAVE)
                                                       &trans                &kp LC(LA(LEFT))          &sht 5 LEFT_SHIFT  &lt 1 BACKSPACE  &lt 2 DELETE  &lt 4 ENTER            &lt 3 SPACE            &kp TAB    &kp LC(LA(RIGHT))          &trans
            >;

            label = "Warp";
        };
    };
};
